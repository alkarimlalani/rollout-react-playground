{"version":3,"sources":["../src/index.ts","../src/rich-editor/extensions/enter-handler/enter-handler.extension.ts","../src/rich-editor/extensions/esc-handler/esc-handler.extension.ts","../src/rich-editor/extensions/link/link.extension.ts","../src/rich-editor/extensions/mention/mention.extension.ts","../src/rich-editor/extensions/mention/get-suggestions.ts","../src/rich-editor/extensions/curly-brackets/curly-brackets.extension.ts","../src/rich-editor/extensions/curly-brackets/get-suggestions.ts","../src/rich-editor/extensions/shift-enter-handler/shift-enter-handler.extension.ts","../src/rich-editor/formatting.ts","../src/rich-editor/nodes/document/any-block-document.ts","../src/rich-editor/nodes/document/single-paragraph-document.ts","../src/rich-editor/schema.ts","../../../node_modules/orderedmap/index.es.js","../../../node_modules/prosemirror-model/src/diff.js","../../../node_modules/prosemirror-model/src/fragment.js","../../../node_modules/prosemirror-model/src/comparedeep.js","../../../node_modules/prosemirror-model/src/mark.js","../../../node_modules/prosemirror-model/src/replace.js","../../../node_modules/prosemirror-model/src/resolvedpos.js","../../../node_modules/prosemirror-model/src/node.js","../../../node_modules/prosemirror-model/src/content.js","../../../node_modules/prosemirror-model/src/schema.js","../../../node_modules/prosemirror-model/src/from_dom.js","../../../node_modules/prosemirror-model/src/to_dom.js","../../../node_modules/prosemirror-transform/src/map.js","../../../node_modules/prosemirror-transform/src/transform.js","../../../node_modules/prosemirror-transform/src/step.js","../../../node_modules/prosemirror-transform/src/replace_step.js","../../../node_modules/prosemirror-transform/src/structure.js","../../../node_modules/prosemirror-transform/src/mark_step.js","../../../node_modules/prosemirror-transform/src/mark.js","../../../node_modules/prosemirror-transform/src/replace.js","../src/rich-editor/utils/plainToRichText.ts","../src/rich-editor/utils/appendText.ts","../src/rich-editor/utils/mapMentions.ts","../src/rich-editor/utils/prependText.ts","../src/rich-editor/utils/resolveMentions.ts","../src/rich-editor/utils/richTextToPlain.ts","../src/rich-editor/utils/toHTML.ts","../src/rich-editor/utils/unresolveMentions.ts","../src/rich-editor/utils/curly-template.ts","../src/utils/capitalize.ts","../src/utils/is-variable.ts","../src/utils/zod-guard.ts","../src/schema/index.ts","../src/schema/zod-rich-editor-content.ts","../src/schema/input-def-to-zod-object.ts"],"sourcesContent":["export * from \"./rich-editor\";\nexport * from \"./utils\";\nexport * from \"./schema\";\n","import { Editor, Extension } from \"@tiptap/core\";\n\nexport type EnterHandlerOptions = {\n  handler: (props: { editor: Editor }) => boolean | undefined;\n};\n\nexport const EnterHandler = Extension.create<EnterHandlerOptions>({\n  name: \"EnterHandler\",\n  addKeyboardShortcuts() {\n    return {\n      Enter: (props) => {\n        return this.options.handler(props) ?? false;\n      },\n    };\n  },\n});\n","import { Editor, Extension } from \"@tiptap/core\";\n\nexport type EscHandlerOptions = {\n  handler: (props: { editor: Editor }) => boolean | undefined;\n};\n\nexport const EscHandler = Extension.create<EscHandlerOptions>({\n  name: \"EscHandler\",\n  addKeyboardShortcuts() {\n    return {\n      Escape: (props) => {\n        return this.options.handler(props) ?? false;\n      },\n    };\n  },\n});\n","import TiptapLink from \"@tiptap/extension-link\";\n\nexport const Link = TiptapLink.extend({\n  addOptions() {\n    return {\n      ...TiptapLink.options,\n      openOnClick: false,\n    };\n  },\n});\n","import { Node, mergeAttributes, NodeConfig } from \"@tiptap/core\";\n\nexport const MENTION_SYMBOL = \"@\";\n\nexport type Variable = {\n  id: string;\n  label: string;\n  type: \"string\" | \"number\" | \"boolean\" | \"email\";\n};\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    mention: {\n      insertMentionSymbol: () => ReturnType;\n    };\n  }\n}\n\nexport interface MentionStorage {\n  variables: readonly Variable[] | null;\n  setVariables(newVariables: readonly Variable[] | null): void;\n  menuContainer: HTMLDivElement | null;\n}\n\nexport type MentionOptions = {\n  variables: readonly Variable[] | null;\n};\n\nexport const mentionConfig: Partial<\n  NodeConfig<MentionOptions, MentionStorage>\n> = {\n  name: \"mention\",\n  // Increase the priority in order to load this before the EnterHandler extension.\n  // We want to let the Mention extension handle the enter keypress first.\n  priority: 110,\n  group: \"inline\",\n  inline: true,\n  selectable: false,\n  atom: true,\n\n  addCommands() {\n    return {\n      insertMentionSymbol: () => {\n        return ({ chain }) =>\n          chain().insertContent(MENTION_SYMBOL).focus().run();\n      },\n    };\n  },\n\n  addStorage() {\n    return {\n      variables: this.options?.variables ?? null,\n      setVariables(newVariables: Variable[]) {\n        this.variables = newVariables;\n      },\n      menuContainer: null,\n    };\n  },\n\n  addAttributes() {\n    return {\n      variable: {\n        default: null,\n        parseHTML: (element) => {\n          return {\n            id: element.getAttribute(\"data-variable-id\"),\n            label: element.getAttribute(\"data-variable-label\"),\n            type: element.getAttribute(\"data-variable-type\"),\n          };\n        },\n        renderHTML: (attributes) => {\n          if (!attributes.variable) {\n            return {};\n          }\n\n          return {\n            \"data-variable-id\": attributes.variable.id,\n            \"data-variable-label\": attributes.variable.label,\n            \"data-variable-type\": attributes.variable.type,\n          };\n        },\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: `span[data-type=\"${this.name}\"]`,\n      },\n    ];\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      \"span\",\n      mergeAttributes({ \"data-type\": this.name }, HTMLAttributes),\n      `${node.attrs.variable?.label}`,\n    ];\n  },\n\n  renderText({ node }) {\n    const variable = node.attrs.variable as Variable;\n    return `${variable.label ?? variable.id}`;\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Backspace: () =>\n        this.editor.commands.command(({ tr, state }) => {\n          let isMention = false;\n          const { selection } = state;\n          const { empty, anchor } = selection;\n\n          if (!empty) {\n            return false;\n          }\n\n          state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {\n            if (node.type.name === this.name) {\n              isMention = true;\n              tr.insertText(MENTION_SYMBOL, pos, pos + node.nodeSize);\n\n              return false;\n            }\n          });\n\n          return isMention;\n        }),\n    };\n  },\n};\n\nexport const Mention = Node.create<MentionOptions, MentionStorage>(\n  mentionConfig\n);\n","import { Editor } from \"@tiptap/core\";\nimport { matchSorter } from \"match-sorter\";\n\nimport { Variable, MentionStorage } from \"./mention.extension\";\n\nfunction match(variables: readonly Variable[], query: string) {\n  return matchSorter(variables, query, {\n    keys: [(option) => option.label],\n    threshold: matchSorter.rankings.ACRONYM,\n  });\n}\n\nexport function getSuggestions(editor: Editor, query: string): Variable[] {\n  const mentionStorage = editor.storage.mention as MentionStorage;\n  const { variables } = mentionStorage;\n\n  if (!variables) {\n    return [];\n  }\n\n  return match(variables, query);\n}\n","import { Node, mergeAttributes, NodeConfig } from \"@tiptap/core\";\n\nexport const CURLY_BRACKETS_SYMBOL = \"{{\";\n\nexport type CurlyBracketsVariable = {\n  id: string;\n  label: string;\n  type: \"string\" | \"number\" | \"boolean\" | \"email\";\n};\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    curlyBrackets: {\n      insertCurlyBracketsSymbol: () => ReturnType;\n    };\n  }\n}\n\nexport interface CurlyBracketsStorage {\n  variables: readonly CurlyBracketsVariable[] | null;\n  setVariables(newVariables: readonly CurlyBracketsVariable[] | null): void;\n  menuContainer: HTMLDivElement | null;\n}\n\nexport type CurlyBracketsOptions = {\n  variables: readonly CurlyBracketsVariable[] | null;\n};\n\nexport const curlyBracketsConfig: Partial<\n  NodeConfig<CurlyBracketsOptions, CurlyBracketsStorage>\n> = {\n  name: \"curly-brackets\",\n  // Increase the priority in order to load this before the EnterHandler extension.\n  // We want to let the Curly Brackets extension handle the enter keypress first.\n  priority: 110,\n  group: \"inline\",\n  inline: true,\n  selectable: false,\n  atom: true,\n\n  addCommands() {\n    return {\n      insertCurlyBracketsSymbol: () => {\n        return ({ chain }) =>\n          chain().insertContent(CURLY_BRACKETS_SYMBOL).focus().run();\n      },\n    };\n  },\n\n  addStorage() {\n    return {\n      variables: this.options?.variables ?? null,\n      setVariables(newVariables: CurlyBracketsVariable[]) {\n        this.variables = newVariables;\n      },\n      menuContainer: null,\n    };\n  },\n\n  addAttributes() {\n    return {\n      variable: {\n        default: null,\n        parseHTML: (element) => {\n          return {\n            id: element.getAttribute(\"data-variable-id\"),\n            label: element.getAttribute(\"data-variable-label\"),\n          };\n        },\n        renderHTML: (attributes) => {\n          if (!attributes.variable) {\n            return {};\n          }\n\n          return {\n            \"data-variable-id\": attributes.variable.id,\n            \"data-variable-label\": attributes.variable.label,\n          };\n        },\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: `span[data-type=\"${this.name}\"]`,\n      },\n    ];\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      \"span\",\n      mergeAttributes({ \"data-type\": this.name }, HTMLAttributes),\n      `${node.attrs.variable?.label}`,\n    ];\n  },\n\n  renderText({ node }) {\n    const variable = node.attrs.variable as CurlyBracketsVariable;\n    return `${variable.label ?? variable.id}`;\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Backspace: () =>\n        this.editor.commands.command(({ tr, state }) => {\n          let isCurlyBrackets = false;\n          const { selection } = state;\n          const { empty, anchor } = selection;\n\n          if (!empty) {\n            return false;\n          }\n\n          state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {\n            if (node.type.name === this.name) {\n              isCurlyBrackets = true;\n              tr.insertText(CURLY_BRACKETS_SYMBOL, pos, pos + node.nodeSize);\n\n              return false;\n            }\n          });\n\n          return isCurlyBrackets;\n        }),\n    };\n  },\n};\n\nexport const CurlyBrackets = Node.create<\n  CurlyBracketsOptions,\n  CurlyBracketsStorage\n>(curlyBracketsConfig);\n","import { Editor } from \"@tiptap/core\";\nimport { matchSorter } from \"match-sorter\";\n\nimport {\n  CurlyBracketsVariable,\n  CurlyBracketsStorage,\n} from \"./curly-brackets.extension\";\n\nfunction match(variables: readonly CurlyBracketsVariable[], query: string) {\n  return matchSorter(variables, query, {\n    keys: [(option) => option.label],\n    threshold: matchSorter.rankings.ACRONYM,\n  });\n}\n\nexport function getCurlyBracketsSuggestions(\n  editor: Editor,\n  query: string\n): CurlyBracketsVariable[] {\n  const curlyBracketsStorage = editor.storage[\n    \"curly-brackets\"\n  ] as CurlyBracketsStorage;\n  const { variables } = curlyBracketsStorage;\n\n  if (!variables) {\n    return [];\n  }\n\n  return match(variables, query);\n}\n","import { Editor, Extension } from \"@tiptap/core\";\n\nexport type ShiftEnterHandlerOptions = {\n  handler: (props: { editor: Editor }) => boolean | undefined;\n};\n\nexport const ShiftEnterHandler = Extension.create<ShiftEnterHandlerOptions>({\n  name: \"ShiftEnterHandler\",\n  addKeyboardShortcuts() {\n    return {\n      \"Shift-Enter\": (props) => {\n        return this.options.handler(props) ?? false;\n      },\n    };\n  },\n});\n","import Blockquote from \"@tiptap/extension-blockquote\";\nimport Bold from \"@tiptap/extension-bold\";\nimport BulletList from \"@tiptap/extension-bullet-list\";\nimport Code from \"@tiptap/extension-code\";\nimport CodeBlock from \"@tiptap/extension-code-block\";\nimport Gapcursor from \"@tiptap/extension-gapcursor\";\nimport HardBreak from \"@tiptap/extension-hard-break\";\nimport Heading from \"@tiptap/extension-heading\";\nimport HorizontalRule from \"@tiptap/extension-horizontal-rule\";\nimport Italic from \"@tiptap/extension-italic\";\nimport ListItem from \"@tiptap/extension-list-item\";\nimport OrderedList from \"@tiptap/extension-ordered-list\";\nimport Strike from \"@tiptap/extension-strike\";\nimport Underline from \"@tiptap/extension-underline\";\n\nexport const FORMATTING_EXTENSIONS = [\n  Blockquote,\n  Bold,\n  BulletList,\n  Code,\n  CodeBlock,\n  Gapcursor,\n  HardBreak,\n  Heading,\n  HorizontalRule,\n  Italic,\n  ListItem,\n  OrderedList,\n  Strike,\n  Underline,\n];\n","import { Node } from \"@tiptap/core\";\n\nexport const AnyBlockDocument = Node.create({\n  name: \"doc\",\n  topNode: true,\n  content: \"block+\",\n});\n","import { Node } from \"@tiptap/core\";\n\nexport const SingleParagraphDocument = Node.create({\n  name: \"doc\",\n  topNode: true,\n  content: \"paragraph\",\n});\n","import { getSchema } from \"@tiptap/core\";\nimport Paragraph from \"@tiptap/extension-paragraph\";\nimport Text from \"@tiptap/extension-text\";\n\nimport { CurlyBrackets } from \"./extensions/curly-brackets\";\nimport { Link } from \"./extensions/link\";\nimport { Mention } from \"./extensions/mention\";\nimport { FORMATTING_EXTENSIONS } from \"./formatting\";\nimport { AnyBlockDocument } from \"./nodes/document/any-block-document\";\n\nexport const SCHEMA_EXTENSIONS = [\n  AnyBlockDocument,\n  Link,\n  Mention,\n  Paragraph,\n  Text,\n  CurlyBrackets,\n  ...FORMATTING_EXTENSIONS,\n];\n\nexport const schema = getSchema(SCHEMA_EXTENSIONS);\n","// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n","export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n","import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // :: (number, number, ?string, ?union<string, (leafNode: Node) → string>) → string\n  // Extract the text between `from` and `to`. See the same method on\n  // [`Node`](#model.Node.textBetween).\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += typeof leafText === 'function' ? leafText(node): leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) → Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) → Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) → Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) → bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) → ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) → ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) → {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () → string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () → ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) → Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) → Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) → Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n","export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n","import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) → bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () → Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) → Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) → bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) → [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n","import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment—i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) → bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () → ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) → Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n  }\n\n  // :: (Fragment, ?bool) → Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n","import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent—text nodes are ‘flat’ in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) → Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) → number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) → number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) → number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () → [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) → ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) → number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) → bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n","import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node, index: number) → ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?union<string, ?(leafNode: Node) -> string>) → string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted to separate text\n  // from different block nodes. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) → bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) → bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) → bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) → Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) → Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) → Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) → Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) → Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) → ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) → ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) → bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () → string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) → ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) → bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) → bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) → bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    let copy = Mark.none\n    for (let i = 0; i < this.marks.length; i++) copy = this.marks[i].addToSet(copy)\n    if (!Mark.sameSet(copy, this.marks))\n      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () → Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) → Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n","import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) → ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) → ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) → ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) → ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) → {type: NodeType, next: ContentMatch}\n  // Get the _n_​th outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n","import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: union<\"pre\", \"normal\">\n  // The node type's [whitespace](#view.NodeSpec.whitespace) option.\n  get whitespace() { return this.spec.whitespace || (this.spec.code ? \"pre\" : \"normal\") }\n\n  // :: () → bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) → bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) → bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) → Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) → [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) → ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) → bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   whitespace:: ?union<\"pre\", \"normal\">\n//   Controls way whitespace in this a node is parsed. The default is\n//   `\"normal\"`, which causes the [DOM parser](#model.DOMParser) to\n//   collapse whitespace in normal mode, and normalize it (replacing\n//   newlines and such with spaces) otherwise. `\"pre\"` causes the\n//   parser to preserve spaces inside the node. When this option isn't\n//   given, but [`code`](#model.NodeSpec.code) is true, `whitespace`\n//   will default to `\"pre\"`. Note that this option doesn't influence\n//   the way the node is rendered—that should be handled by `toDOM`\n//   and/or styling.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) → Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) → Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) → Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) → Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n","import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) → [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) → DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(type, preserveWhitespace, base) {\n  if (preserveWhitespace != null) return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |\n    (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n  return type && type.whitespace == \"pre\" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n\n  inlineContext(node) {\n    if (this.type) return this.type.inlineContent\n    if (this.content.length) return this.content[0].isInline\n    return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if (top.options & OPT_PRESERVE_WS_FULL ||\n        top.inlineContext(dom) ||\n        /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      } else {\n        value = value.replace(/\\r\\n?/g, \"\\n\")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n      this.ignoreFallback(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Called for ignored nodes\n  ignoreFallback(dom) {\n    // Ignored BR nodes should at least create an inline context\n    if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n      this.findPlace(this.parser.schema.text(\"-\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) → bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) → ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) → bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = wsOptionsFor(type, preserveWS, top.options)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) → bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n","// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) → DOMOutputSpec>, Object<?(mark: Mark, inline: bool) → DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) → DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) → dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNodeInner(node, options))\n    })\n\n    return target\n  }\n\n  serializeNodeInner(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  // :: (Node, ?Object) → dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let dom = this.serializeNodeInner(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) → DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) → Object<(node: Node) → DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n","// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    if (!ranges.length && StepMap.empty) return StepMap.empty\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) → MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) → number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () → StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) → StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\n// :: StepMap\n// A StepMap that contains no changed ranges.\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) → Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) → ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // :: () → Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) → number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) → MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          i = corr\n          pos = this.maps[corr].recover(result.recover)\n          continue\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n","import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) → this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) → StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n","import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) → StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () → StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) → Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) → ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) → ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () → Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) → Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) → StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) → StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) → StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n","import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`—the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--) {\n    if (content.size) {\n      let match = wrappers[i].type.contentMatch.matchFragment(content)\n      if (!match || !match.validEnd)\n        throw new RangeError(\"Wrapper type given to Transform.wrap does not form valid content of its parent wrapper\")\n    }\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n  }\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n}\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after, index = $pos.index(d)\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      index++\n      after = $pos.node(d).maybeChild(index)\n    } else {\n      before = $pos.node(d).maybeChild(index - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      let parent = $pos.node(d), fits = false\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content)\n      } else {\n        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type)\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0])\n      }\n      if (fits)\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the marked range.\n    this.from = from\n    // :: number\n    // The end of the marked range.\n    this.to = to\n    // :: Mark\n    // The mark to add.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the unmarked range.\n    this.from = from\n    // :: number\n    // The end of the unmarked range.\n    this.to = to\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n","import {MarkType, Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {AddMarkStep, RemoveMarkStep} from \"./mark_step\"\nimport {ReplaceStep} from \"./replace_step\"\n\n// :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  let removed = [], added = [], removing = null, adding = null\n  this.doc.nodesBetween(from, to, (node, pos, parent) => {\n    if (!node.isInline) return\n    let marks = node.marks\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)\n      let newSet = mark.addToSet(marks)\n\n      for (let i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            removing.to = end\n          else\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]))\n        }\n      }\n\n      if (adding && adding.to == start)\n        adding.to = end\n      else\n        added.push(adding = new AddMarkStep(start, end, mark))\n    }\n  })\n\n  removed.forEach(s => this.step(s))\n  added.forEach(s => this.step(s))\n  return this\n}\n\n// :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark = null) {\n  let matched = [], step = 0\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isInline) return\n    step++\n    let toRemove = null\n    if (mark instanceof MarkType) {\n      let set = node.marks, found\n      while (found = mark.isInSet(set)) {\n        ;(toRemove || (toRemove = [])).push(found)\n        set = found.removeFromSet(set)\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark]\n    } else {\n      toRemove = node.marks\n    }\n    if (toRemove && toRemove.length) {\n      let end = Math.min(pos + node.nodeSize, to)\n      for (let i = 0; i < toRemove.length; i++) {\n        let style = toRemove[i], found\n        for (let j = 0; j < matched.length; j++) {\n          let m = matched[j]\n          if (m.step == step - 1 && style.eq(matched[j].style)) found = m\n        }\n        if (found) {\n          found.to = end\n          found.step = step\n        } else {\n          matched.push({style, from: Math.max(pos, from), to: end, step})\n        }\n      }\n    }\n  })\n  matched.forEach(m => this.step(new RemoveMarkStep(m.from, m.to, m.style)))\n  return this\n}\n\n// :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match = parentType.contentMatch) {\n  let node = this.doc.nodeAt(pos)\n  let delSteps = [], cur = pos + 1\n  for (let i = 0; i < node.childCount; i++) {\n    let child = node.child(i), end = cur + child.nodeSize\n    let allowed = match.matchType(child.type, child.attrs)\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty))\n    } else {\n      match = allowed\n      for (let j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type))\n        this.step(new RemoveMarkStep(cur, end, child.marks[j]))\n    }\n    cur = end\n  }\n  if (!match.validEnd) {\n    let fill = match.fillBefore(Fragment.empty, true)\n    this.replace(cur, cur, new Slice(fill, 0, 0))\n  }\n  for (let i = delSteps.length - 1; i >= 0; i--) this.step(delSteps[i])\n  return this\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\n\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\nimport {Transform} from \"./transform\"\nimport {insertPoint} from \"./structure\"\n\n// :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nexport function replaceStep(doc, from, to = from, slice = Slice.empty) {\n  if (from == to && !slice.size) return null\n\n  let $from = doc.resolve(from), $to = doc.resolve(to)\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice)\n  return new Fitter($from, $to, slice).fit()\n}\n\n// :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to = from, slice = Slice.empty) {\n  let step = replaceStep(this.doc, from, to, slice)\n  if (step) this.step(step)\n  return this\n}\n\n// :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n}\n\n// :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nclass Fitter {\n  constructor($from, $to, slice) {\n    this.$to = $to\n    this.$from = $from\n    this.unplaced = slice\n\n    this.frontier = []\n    for (let i = 0; i <= $from.depth; i++) {\n      let node = $from.node(i)\n      this.frontier.push({\n        type: node.type,\n        match: node.contentMatchAt($from.indexAfter(i))\n      })\n    }\n\n    this.placed = Fragment.empty\n    for (let i = $from.depth; i > 0; i--)\n      this.placed = Fragment.from($from.node(i).copy(this.placed))\n  }\n\n  get depth() { return this.frontier.length - 1 }\n\n  fit() {\n    // As long as there's unplaced content, try to place some of it.\n    // If that fails, either increase the open score of the unplaced\n    // slice, or drop nodes from it, and then try again.\n    while (this.unplaced.size) {\n      let fit = this.findFittable()\n      if (fit) this.placeNodes(fit)\n      else this.openMore() || this.dropNode()\n    }\n    // When there's inline content directly after the frontier _and_\n    // directly after `this.$to`, we must generate a `ReplaceAround`\n    // step that pulls that content into the node after the frontier.\n    // That means the fitting must be done to the end of the textblock\n    // node after `this.$to`, not `this.$to` itself.\n    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth\n    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline))\n    if (!$to) return null\n\n    // If closing to `$to` succeeded, create a step\n    let content = this.placed, openStart = $from.depth, openEnd = $to.depth\n    while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n      content = content.firstChild.content\n      openStart--; openEnd--\n    }\n    let slice = new Slice(content, openStart, openEnd)\n    if (moveInline > -1)\n      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize)\n    if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n      return new ReplaceStep($from.pos, $to.pos, slice)\n  }\n\n  // Find a position on the start spine of `this.unplaced` that has\n  // content that can be moved somewhere on the frontier. Returns two\n  // depths, one for the slice and one for the frontier.\n  findFittable() {\n    // Only try wrapping nodes (pass 2) after finding a place without\n    // wrapping failed.\n    for (let pass = 1; pass <= 2; pass++) {\n      for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n        let fragment, parent\n        if (sliceDepth) {\n          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild\n          fragment = parent.content\n        } else {\n          fragment = this.unplaced.content\n        }\n        let first = fragment.firstChild\n        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n          let {type, match} = this.frontier[frontierDepth], wrap, inject\n          // In pass 1, if the next node matches, or there is no next\n          // node but the parents look compatible, we've found a\n          // place.\n          if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                            : type.compatibleContent(parent.type)))\n            return {sliceDepth, frontierDepth, parent, inject}\n          // In pass 2, look for a set of wrapping nodes that make\n          // `first` fit here.\n          else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n            return {sliceDepth, frontierDepth, parent, wrap}\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          if (parent && match.matchType(parent.type)) break\n        }\n      }\n    }\n  }\n\n  openMore() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (!inner.childCount || inner.firstChild.isLeaf) return false\n    this.unplaced = new Slice(content, openStart + 1,\n                              Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0))\n    return true\n  }\n\n  dropNode() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (inner.childCount <= 1 && openStart > 0) {\n      let openAtEnd = content.size - openStart <= openStart + inner.size\n      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,\n                                openAtEnd ? openStart - 1 : openEnd)\n    } else {\n      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd)\n    }\n  }\n\n  // : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})\n  // Move content from the unplaced slice at `sliceDepth` to the\n  // frontier node at `frontierDepth`. Close that frontier node when\n  // applicable.\n  placeNodes({sliceDepth, frontierDepth, parent, inject, wrap}) {\n    while (this.depth > frontierDepth) this.closeFrontierNode()\n    if (wrap) for (let i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i])\n\n    let slice = this.unplaced, fragment = parent ? parent.content : slice.content\n    let openStart = slice.openStart - sliceDepth\n    let taken = 0, add = []\n    let {match, type} = this.frontier[frontierDepth]\n    if (inject) {\n      for (let i = 0; i < inject.childCount; i++) add.push(inject.child(i))\n      match = match.matchFragment(inject)\n    }\n    // Computes the amount of (end) open nodes at the end of the\n    // fragment. When 0, the parent is open, but no more. When\n    // negative, nothing is open.\n    let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd)\n    // Scan over the fragment, fitting as many child nodes as\n    // possible.\n    while (taken < fragment.childCount) {\n      let next = fragment.child(taken), matches = match.matchType(next.type)\n      if (!matches) break\n      taken++\n      if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n        match = matches\n        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,\n                                taken == fragment.childCount ? openEndCount : -1))\n      }\n    }\n    let toEnd = taken == fragment.childCount\n    if (!toEnd) openEndCount = -1\n\n    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add))\n    this.frontier[frontierDepth].match = match\n\n    // If the parent types match, and the entire node was moved, and\n    // it's not open, close this frontier node right away.\n    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n      this.closeFrontierNode()\n\n    // Add new frontier nodes for any open nodes at the end.\n    for (let i = 0, cur = fragment; i < openEndCount; i++) {\n      let node = cur.lastChild\n      this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)})\n      cur = node.content\n    }\n\n    // Update `this.unplaced`. Drop the entire node from which we\n    // placed it we got to its end, otherwise just drop the placed\n    // nodes.\n    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n      : sliceDepth == 0 ? Slice.empty\n      : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),\n                  sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1)\n  }\n\n  mustMoveInline() {\n    if (!this.$to.parent.isTextblock) return -1\n    let top = this.frontier[this.depth], level\n    if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n        (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) return -1\n\n    let {depth} = this.$to, after = this.$to.after(depth)\n    while (depth > 1 && after == this.$to.end(--depth)) ++after\n    return after\n  }\n\n  findCloseLevel($to) {\n    scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n      let {match, type} = this.frontier[i]\n      let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1))\n      let fit = contentAfterFits($to, i, type, match, dropInner)\n      if (!fit) continue\n      for (let d = i - 1; d >= 0; d--) {\n        let {match, type} = this.frontier[d]\n        let matches = contentAfterFits($to, d, type, match, true)\n        if (!matches || matches.childCount) continue scan\n      }\n      return {depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}\n    }\n  }\n\n  close($to) {\n    let close = this.findCloseLevel($to)\n    if (!close) return null\n\n    while (this.depth > close.depth) this.closeFrontierNode()\n    if (close.fit.childCount) this.placed = addToFragment(this.placed, close.depth, close.fit)\n    $to = close.move\n    for (let d = close.depth + 1; d <= $to.depth; d++) {\n      let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d))\n      this.openFrontierNode(node.type, node.attrs, add)\n    }\n    return $to\n  }\n\n  openFrontierNode(type, attrs, content) {\n    let top = this.frontier[this.depth]\n    top.match = top.match.matchType(type)\n    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)))\n    this.frontier.push({type, match: type.contentMatch})\n  }\n\n  closeFrontierNode() {\n    let open = this.frontier.pop()\n    let add = open.match.fillBefore(Fragment.empty, true)\n    if (add.childCount) this.placed = addToFragment(this.placed, this.frontier.length, add)\n  }\n}\n\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) return fragment.cutByIndex(count)\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))\n}\n\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) return fragment.append(content)\n  return fragment.replaceChild(fragment.childCount - 1,\n                               fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))\n}\n\nfunction contentAt(fragment, depth) {\n  for (let i = 0; i < depth; i++) fragment = fragment.firstChild.content\n  return fragment\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) return node\n  let frag = node.content\n  if (openStart > 1)\n    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0))\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag)\n    if (openEnd <= 0) frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true))\n  }\n  return node.copy(frag)\n}\n\nfunction contentAfterFits($to, depth, type, match, open) {\n  let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth)\n  if (index == node.childCount && !type.compatibleContent(node.type)) return null\n  let fit = match.fillBefore(node.content, true, index)\n  return fit && !invalidMarks(type, node.content, index) ? fit : null\n}\n\nfunction invalidMarks(type, fragment, start) {\n  for (let i = start; i < fragment.childCount; i++)\n    if (!type.allowsMarks(fragment.child(i).marks)) return true\n  return false\n}\n\nfunction definesContent(type) {\n  return type.spec.defining || type.spec.definingForContent\n}\n\n// :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining as context](#model.NodeSpec.definingAsContext), or\n// including an open parent node from the slice that _is_ marked as\n// [defining its content](#model.NodeSpec.definingForContent).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) return this.deleteRange(from, to)\n\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  if (fitsTrivially($from, $to, slice))\n    return this.step(new ReplaceStep(from, to, slice))\n\n  let targetDepths = coveredDepths($from, this.doc.resolve(to))\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop()\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  let preferredTarget = -($from.depth + 1)\n  targetDepths.unshift(preferredTarget)\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    let spec = $from.node(d).type.spec\n    if (spec.defining || spec.definingAsContext || spec.isolating) break\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d\n    else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d)\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  let preferredTargetIndex = targetDepths.indexOf(preferredTarget)\n\n  let leftNodes = [], preferredDepth = slice.openStart\n  for (let content = slice.content, i = 0;; i++) {\n    let node = content.firstChild\n    leftNodes.push(node)\n    if (i == slice.openStart) break\n    content = node.content\n  }\n\n  // Back up preferredDepth to cover defining textblocks directly\n  // above it, possibly skipping a non-defining textblock.\n  for (let d = preferredDepth - 1; d >= 0; d--) {\n    let type = leftNodes[d].type, def = definesContent(type)\n    if (def && $from.node(preferredTargetIndex).type != type) preferredDepth = d\n    else if (def || !type.isTextblock) break\n  }\n\n  for (let j = slice.openStart; j >= 0; j--) {\n    let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1)\n    let insert = leftNodes[openDepth]\n    if (!insert) continue\n    for (let i = 0; i < targetDepths.length; i++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth }\n      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1)\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd))\n    }\n  }\n\n  let startSteps = this.steps.length\n  for (let i = targetDepths.length - 1; i >= 0; i--) {\n    this.replace(from, to, slice)\n    if (this.steps.length > startSteps) break\n    let depth = targetDepths[i]\n    if (depth < 0) continue\n    from = $from.before(depth); to = $to.after(depth)\n  }\n  return this\n}\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    let first = fragment.firstChild\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)))\n  }\n  if (depth > newOpen) {\n    let match = parent.contentMatchAt(0)\n    let start = match.fillBefore(fragment).append(fragment)\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true))\n  }\n  return fragment\n}\n\n// :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    let point = insertPoint(this.doc, from, node.type)\n    if (point != null) from = to = point\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  let covered = coveredDepths($from, $to)\n  for (let i = 0; i < covered.length; i++) {\n    let depth = covered[i], last = i == covered.length - 1\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      return this.delete($from.start(depth), $to.end(depth))\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      return this.delete($from.before(depth), $to.after(depth))\n  }\n  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      return this.delete($from.before(d), to)\n  }\n  return this.delete(from, to)\n}\n\n// : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  let result = [], minDepth = Math.min($from.depth, $to.depth)\n  for (let d = minDepth; d >= 0; d--) {\n    let start = $from.start(d)\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) break\n    if (start == $to.start(d) ||\n        (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&\n         d && $to.start(d - 1) == start - 1))\n      result.push(d)\n  }\n  return result\n}\n","import type { RichEditorContent } from \"../../rich-editor\";\nimport type { JSONContent } from \"@tiptap/core\";\n\nexport function createDocument(content: JSONContent[]): RichEditorContent {\n  return {\n    type: \"doc\",\n    content,\n  };\n}\n\nexport function createMention(variableId: string) {\n  return {\n    type: \"mention\",\n    attrs: {\n      variable: {\n        id: variableId,\n      },\n    },\n  };\n}\n\nexport function createParagraph(content: JSONContent[]) {\n  return {\n    type: \"paragraph\",\n    content,\n  };\n}\n\nexport function createDocumentWithMention(variableId: string) {\n  return createDocument([createParagraph([createMention(variableId)])]);\n}\n\nexport function plainToRichText(plainText: string): RichEditorContent {\n  const content = plainText === \"\" ? undefined : [toTextNode(plainText)];\n\n  return createDocument([\n    {\n      type: \"paragraph\",\n      ...(content ? { content } : undefined),\n    },\n  ]);\n}\n\nexport function toTextNode(plainText: string): JSONContent {\n  return {\n    type: \"text\",\n    text: plainText,\n  };\n}\n","import { JSONContent } from \"@tiptap/core\";\nimport { Transform } from \"prosemirror-transform\";\n\nimport { schema } from \"../schema\";\nimport { plainToRichText } from \"./plainToRichText\";\n\nexport function appendText(\n  original: JSONContent,\n  stringToAppend: string\n): JSONContent {\n  if (original == null) {\n    return plainToRichText(stringToAppend);\n  }\n\n  const originalContent = schema.nodeFromJSON(original);\n  const contentToAppend = schema.text(stringToAppend);\n  const paragraph = originalContent.firstChild!;\n\n  const tr = new Transform(paragraph).insert(\n    paragraph.content.size,\n    contentToAppend\n  );\n  return tr.doc.toJSON();\n}\n","import { JSONContent } from \"@tiptap/core\";\n\nexport function flatMapMentions(\n  contentUnresolved: JSONContent,\n  cb: (node: JSONContent) => JSONContent[]\n): JSONContent {\n  if (contentUnresolved.type === \"mention\") {\n    return cb(contentUnresolved);\n  }\n\n  if (contentUnresolved.content != null) {\n    return {\n      ...contentUnresolved,\n      content: contentUnresolved.content.flatMap((c) => flatMapMentions(c, cb)),\n    };\n  }\n\n  return contentUnresolved;\n}\n","import { JSONContent } from \"@tiptap/core\";\nimport { Transform } from \"prosemirror-transform\";\n\nimport { schema } from \"../schema\";\n\nexport function prependText(\n  original: JSONContent,\n  stringToAppend: string\n): JSONContent {\n  const originalContent = schema.nodeFromJSON(original);\n  const contentToAppend = schema.text(stringToAppend);\n  const paragraph = originalContent.firstChild!;\n\n  const tr = new Transform(paragraph).insert(0, contentToAppend);\n  return tr.doc.toJSON();\n}\n","import { JSONContent } from \"@tiptap/core\";\n\nimport { Variable } from \"../extensions/mention\";\nimport { flatMapMentions } from \"./mapMentions\";\n\nexport function resolveMentions(\n  contentResolved: JSONContent,\n  variables: readonly Variable[]\n) {\n  if (contentResolved == null) {\n    return null;\n  }\n\n  return flatMapMentions(contentResolved, (mention) => {\n    const variableId = mention.attrs!.variable.id;\n    const variable = variables.find((v) => v.id === variableId);\n\n    return [\n      {\n        ...mention,\n        attrs: {\n          variable,\n        },\n      },\n    ];\n  });\n}\n","import { getText, JSONContent, TextSerializer } from \"@tiptap/core\";\nimport { Schema } from \"prosemirror-model\";\n\nimport { schema } from \"../schema\";\n\nexport function richTextToPlain(\n  contentResolved: JSONContent,\n  fallbackEmptyToLabel = false\n): string {\n  const blockSeparator = \"\\n\\n\";\n  const contentNode = schema.nodeFromJSON(contentResolved);\n  const textSerializers = getTextSeralizersFromSchema(schema);\n\n  if (fallbackEmptyToLabel) {\n    return getText(contentNode, {\n      blockSeparator,\n      textSerializers,\n    });\n  }\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...textSerializers,\n      mention: (props) => {\n        if (props.node.attrs.value == null) {\n          return \"\";\n        }\n        return textSerializers.mention(props);\n      },\n    },\n  });\n}\n\n// https://github.com/ueberdosis/tiptap/blob/main/packages/core/src/helpers/getTextSeralizersFromSchema.ts\nexport function getTextSeralizersFromSchema(\n  s: Schema\n): Record<string, TextSerializer> {\n  return Object.fromEntries(\n    Object.entries(s.nodes)\n      .filter(([, node]) => node.spec.toText)\n      .map(([name, node]) => [name, node.spec.toText])\n  );\n}\n","import { JSONContent } from \"@tiptap/core\";\nimport { generateHTML } from \"@tiptap/html\";\n\nimport { SCHEMA_EXTENSIONS } from \"../schema\";\n\nexport function toHTML(resolvedContent: JSONContent): string {\n  return generateHTML(resolvedContent, SCHEMA_EXTENSIONS as any);\n}\n","import { JSONContent } from \"@tiptap/core\";\n\nimport { flatMapMentions } from \"./mapMentions\";\n\nexport function unresolveMentions(contentResolved: JSONContent) {\n  if (contentResolved == null) {\n    return null;\n  }\n\n  return flatMapMentions(contentResolved, (mention) => {\n    return [\n      {\n        ...mention,\n        attrs: {\n          variable: {\n            id: mention.attrs!.variable.id,\n          },\n        },\n      },\n    ];\n  });\n}\n","import {\n  createDocument,\n  createMention,\n  createParagraph,\n  toTextNode,\n} from \"./plainToRichText\";\n\nexport function curlyTemplate(template: string) {\n  const content = template\n    .split(/({{\\w+}})/g)\n    .filter((part) => part !== \"\")\n    .map((part) =>\n      /^{{\\w+}}$/.test(part)\n        ? createMention(part.slice(2, -2))\n        : toTextNode(part)\n    );\n\n  return createDocument([createParagraph(content)]);\n}\n","export function capitalize<T extends string>(text: T) {\n  return `${text.slice(0, 1).toUpperCase()}${text.slice(1)}` as Capitalize<T>;\n}\n","export const ROLLOUTHQ_VARIABLE_PREFIX = \"ROLLOUTHQ_VARIABLE_\";\n\nexport function isVariable(id: string | undefined) {\n  return id != null && id.startsWith(ROLLOUTHQ_VARIABLE_PREFIX);\n}\n","import type { z, ZodType } from \"zod\";\n\nexport function zodGuard<T extends ZodType>(zodType: T) {\n  return (x: unknown): x is z.infer<T> => passesValidation(zodType, x);\n}\n\nexport function passesValidation<T extends ZodType>(\n  zodType: T,\n  x: unknown\n): x is z.infer<T> {\n  return zodType.safeParse(x).success;\n}\n","import {\n  boolean,\n  object,\n  record,\n  string,\n  ZodOptional,\n  ZodTypeAny,\n  union,\n  literal,\n} from \"zod\";\n\nimport { zRichEditorContent } from \"./zod-rich-editor-content\";\n\nexport * from \"./zod-rich-editor-content\";\n\nexport { inputDefToZodObject } from \"./input-def-to-zod-object\";\nexport type { InputDef } from \"./input-def-to-zod-object\";\n\nexport const z = {\n  literal,\n  boolean,\n  object,\n  record,\n  string,\n  richEditorContent: zRichEditorContent,\n  union,\n};\n\nexport function unwrapOptional(type: ZodTypeAny): ZodTypeAny {\n  if (type instanceof ZodOptional) {\n    return unwrapOptional(type.unwrap());\n  }\n  return type;\n}\n","import { z, ZodTypeAny } from \"zod\";\n\nimport { RichEditorContent, schema } from \"../rich-editor\";\n\nexport const zRichEditorContent = z\n  .object({})\n  .passthrough()\n  .refine(\n    (obj) => {\n      try {\n        schema.nodeFromJSON(obj);\n        return true;\n      } catch (err) {\n        return false;\n      }\n    },\n    {\n      message: \"Object is not valid RichEditorContent\",\n    }\n  )\n  .transform((obj) => obj as RichEditorContent);\n\nconst IS_Z_RICH_EDITOR_CONTENT = Symbol(\"IS_Z_RICH_EDITOR_CONTENT\");\nObject.assign(zRichEditorContent._def, { [IS_Z_RICH_EDITOR_CONTENT]: true });\n\nexport function isZRichEditorContent<T extends ZodTypeAny>(type: T) {\n  return IS_Z_RICH_EDITOR_CONTENT in type._def;\n}\n","import { unreachableCase } from \"ts-assert-unreachable\";\nimport { z } from \"zod\";\n\nimport { zRichEditorContent } from \"./zod-rich-editor-content\";\n\nexport type InputDef = {\n  key: string;\n  label: string;\n  type: \"string\" | \"plainText\" | \"dropdown\";\n};\n\nexport function inputDefToZodObject(inputs: InputDef[]) {\n  return z.object(\n    Object.fromEntries(\n      inputs.map((i) => {\n        if (i.type === \"plainText\") {\n          return [i.key, z.string()];\n        }\n        if (i.type === \"dropdown\") {\n          return [i.key, z.string()];\n        }\n        if (i.type === \"string\") {\n          return [i.key, zRichEditorContent];\n        }\n        unreachableCase(i.type);\n      })\n    )\n  );\n}\n"],"mappings":"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","names":[]}