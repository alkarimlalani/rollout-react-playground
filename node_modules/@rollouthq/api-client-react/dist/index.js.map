{"version":3,"sources":["../src/index.ts","../src/trpc.tsx"],"sourcesContent":["export * from \"./trpc\";\nexport type { UseQueryResult } from \"react-query\";\n","import assert from \"assert\";\n\nimport { TRPCClient as GenericTRPCClient, TRPCClientError } from \"@trpc/client\";\nimport { createReactQueryHooks } from \"@trpc/react\";\nimport React, {\n  ReactElement,\n  useRef,\n  useState,\n  createContext,\n  useContext,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport {\n  useQuery as useReactQuery,\n  QueryClient,\n  QueryClientProvider,\n  UseQueryResult,\n} from \"react-query\";\n\nimport {\n  InferQueryInput,\n  InferQueryOutput,\n  TQuery,\n  TRPCRouter,\n} from \"@rollouthq/api\";\n\nexport type {\n  TRPCRouter,\n  TQuery,\n  TMutation,\n  InferMutationInput,\n  InferMutationOutput,\n  InferQueryInput,\n  InferQueryOutput,\n} from \"@rollouthq/api\";\n\nconst trpc = createReactQueryHooks<TRPCRouter>();\n\nexport const useQuery = trpc.useQuery;\nexport const useMutation = trpc.useMutation;\nexport const useTRPCContext = trpc.useContext;\n\n/**\n * Similar to `trpc.useQuery`, but the fetch is initiated imperatively,\n * with `fetch` function.\n * @example const q = useLazyQuery(\"hello\")\n * // somewhere in effect\n * q.fetch({ name: \"world\" })\n */\nexport function useLazyQuery<\n  TQ extends string & TQuery,\n  TI extends InferQueryInput<TQ>\n>(queryPath: TQ) {\n  const { client } = trpc.useContext();\n  const [input, setInput] = useState<TI>();\n  const [enabled, setEnabled] = useState(false);\n\n  const query = useReactQuery(\n    [queryPath, input],\n    () => {\n      assert(input != null);\n      // @ts-expect-error\n      return client.query(queryPath, input);\n    },\n    { enabled }\n  );\n\n  const fetch = (newInput: TI) => {\n    setInput(newInput);\n    setEnabled(true);\n  };\n\n  return {\n    ...query,\n    fetch,\n    input,\n  } as UseLazyQueryResult<TQ>;\n}\n\nexport type UseLazyQueryResult<TQ extends string & TQuery> = UseQueryResult<\n  InferQueryOutput<TQ>\n> & {\n  input: InferQueryInput<TQ>;\n  fetch: (input: InferQueryInput<TQ>) => void;\n};\n\nexport type TRPCClient = GenericTRPCClient<TRPCRouter>;\n\nexport type RolloutAPIClientProviderProps = {\n  token: string | (() => Promise<string> | string);\n  apiBaseUrl: string;\n  children: ReactElement;\n};\n\nexport function RolloutAPIClientProvider(props: RolloutAPIClientProviderProps) {\n  const { token: tokenOrGetToken, apiBaseUrl, children } = props;\n  const tokenRef = useRef<string | undefined>(undefined);\n\n  const getCurrentToken = useCallback(async () => {\n    if (typeof tokenOrGetToken === \"string\") {\n      return tokenOrGetToken;\n    } else {\n      if (tokenRef.current == null) {\n        tokenRef.current = await tokenOrGetToken();\n      }\n      return tokenRef.current;\n    }\n  }, [tokenOrGetToken]);\n\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            refetchOnWindowFocus: false,\n            retry(failureCount, error) {\n              if (error instanceof TRPCClientError) {\n                if (error.data.code === \"NOT_FOUND\") {\n                  return false;\n                }\n                if (error.data.code === \"UNAUTHORIZED\") {\n                  // Reset tokenRef so token is refetched on next request\n                  tokenRef.current = undefined;\n                  return true;\n                }\n              }\n              return true;\n            },\n          },\n        },\n      })\n  );\n\n  const [trpcClient] = useState(() =>\n    trpc.createClient({\n      url: `${apiBaseUrl}/trpc`,\n      async headers() {\n        const token = await getCurrentToken();\n        return {\n          authorization: `Bearer ${token}`,\n        };\n      },\n    })\n  );\n\n  const ctx = useMemo(\n    () => ({\n      getToken: getCurrentToken,\n      apiBaseUrl,\n    }),\n    [apiBaseUrl]\n  );\n\n  return (\n    <RolloutAPIClientContext.Provider value={ctx}>\n      <trpc.Provider client={trpcClient} queryClient={queryClient}>\n        <QueryClientProvider client={queryClient}>\n          {children}\n        </QueryClientProvider>\n      </trpc.Provider>\n    </RolloutAPIClientContext.Provider>\n  );\n}\n\ntype RolloutAPIClientContext = {\n  getToken: () => Promise<string>;\n  apiBaseUrl: string;\n};\n\nconst RolloutAPIClientContext = createContext<\n  RolloutAPIClientContext | undefined\n>(undefined);\n\nexport function useRolloutAPIClientContext() {\n  const context = useContext(RolloutAPIClientContext);\n\n  if (!context) {\n    const error = new Error(\"No RolloutAPIClientContext provided\");\n    error.name = \"ContextError\";\n    Error.captureStackTrace?.(error, useRolloutAPIClientContext);\n    throw error;\n  }\n\n  return context;\n}\n"],"mappings":"o4BAAA,6KCAA,MAAmB,qBAEnB,EAAiE,wBACjE,EAAsC,uBACtC,EAQO,oBACP,EAKO,uBAmBD,EAAO,4BAAkC,EAElC,EAAW,EAAK,SAChB,EAAc,EAAK,YACnB,EAAiB,EAAK,WAS5B,WAGL,EAAe,CACf,GAAM,CAAE,UAAW,EAAK,WAAW,EAC7B,CAAC,EAAO,GAAY,eAAa,EACjC,CAAC,EAAS,GAAc,eAAS,EAAK,EAEtC,EAAQ,eACZ,CAAC,EAAW,CAAK,EACjB,IACE,eAAO,GAAS,IAAI,EAEb,EAAO,MAAM,EAAW,CAAK,GAEtC,CAAE,SAAQ,CACZ,EAEM,EAAQ,AAAC,GAAiB,CAC9B,EAAS,CAAQ,EACjB,EAAW,EAAI,CACjB,EAEA,MAAO,QACF,GADE,CAEL,QACA,OACF,EACF,CAiBO,WAAkC,EAAsC,CAC7E,GAAM,CAAE,MAAO,EAAiB,aAAY,YAAa,EACnD,EAAW,aAA2B,MAAS,EAE/C,EAAkB,kBAAY,SAC9B,MAAO,IAAoB,SACtB,EAEH,GAAS,SAAW,MACtB,GAAS,QAAU,KAAM,GAAgB,GAEpC,EAAS,SAEjB,CAAC,CAAe,CAAC,EAEd,CAAC,GAAe,eACpB,IACE,GAAI,eAAY,CACd,eAAgB,CACd,QAAS,CACP,qBAAsB,GACtB,MAAM,EAAc,EAAO,CACzB,GAAI,YAAiB,mBAAiB,CACpC,GAAI,EAAM,KAAK,OAAS,YACtB,MAAO,GAET,GAAI,EAAM,KAAK,OAAS,eAEtB,SAAS,QAAU,OACZ,EAEX,CACA,MAAO,EACT,CACF,CACF,CACF,CAAC,CACL,EAEM,CAAC,GAAc,eAAS,IAC5B,EAAK,aAAa,CAChB,IAAK,GAAG,cACF,UAAU,CAEd,MAAO,CACL,cAAe,UAFH,KAAM,GAAgB,GAGpC,CACF,CACF,CAAC,CACH,EAEM,EAAM,cACV,IAAO,EACL,SAAU,EACV,YACF,GACA,CAAC,CAAU,CACb,EAEA,MACE,yBAAC,EAAwB,SAAxB,CAAiC,MAAO,GACvC,wBAAC,EAAK,SAAL,CAAc,OAAQ,EAAY,YAAa,GAC9C,wBAAC,uBAAoB,OAAQ,GAC1B,CACH,CACF,CACF,CAEJ,CAOA,GAAM,GAA0B,oBAE9B,MAAS,EAEJ,YAAsC,CA9K7C,MA+KE,GAAM,GAAU,iBAAW,CAAuB,EAElD,GAAI,CAAC,EAAS,CACZ,GAAM,GAAQ,GAAI,OAAM,qCAAqC,EAC7D,QAAM,KAAO,eACb,SAAM,oBAAN,mBAA0B,EAAO,GAC3B,CACR,CAEA,MAAO,EACT","names":[]}